
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { CreditCard, Printer, Save } from 'lucide-react';
import { useCreateTransaksi } from '@/hooks/useTransaksi';
import { useCreatePOSTransaction } from '@/hooks/usePOSTransactions';
import { useSimpleAuth } from '@/hooks/useSimpleAuth';
import { useToast } from '@/hooks/use-toast';

interface CartItem {
  id: string;
  nama: string;
  harga_jual: number;
  quantity: number;
  satuan: string;
}

interface Customer {
  id: string;
  name: string;
  type: 'unit' | 'perorangan' | 'guest';
  phone?: string;
}

interface POSPaymentProps {
  cartItems: CartItem[];
  totalAmount: number;
  selectedCustomer: Customer | null;
  selectedPaymentMethod: string;
  onClose: () => void;
  onSuccess: () => void;
}

const POSPayment = ({ 
  cartItems, 
  totalAmount, 
  selectedCustomer,
  selectedPaymentMethod,
  onClose, 
  onSuccess 
}: POSPaymentProps) => {
  const { user } = useSimpleAuth();
  const { toast } = useToast();
  const [amountPaid, setAmountPaid] = useState('');
  const [printReceipt, setPrintReceipt] = useState(true);
  const [processing, setProcessing] = useState(false);

  const createPOSTransaction = useCreatePOSTransaction();
  const createTransaksi = useCreateTransaksi();

  const calculateChange = () => {
    const paid = parseFloat(amountPaid) || 0;
    return Math.max(0, paid - totalAmount);
  };

  const getPaymentMethodText = (method: string) => {
    switch (method) {
      case 'cash': return 'tunai';
      case 'card': return 'kartu';
      case 'digital': return 'digital';
      default: return method;
    }
  };

  const handlePayment = async () => {
    const paid = parseFloat(amountPaid) || 0;
    
    if (paid < totalAmount) {
      toast({
        title: "Jumlah bayar kurang",
        description: "Jumlah bayar kurang dari total!",
        variant: "destructive"
      });
      return;
    }

    setProcessing(true);
    
    try {
      // Generate transaction number for regular transaction
      const customerNote = selectedCustomer ? `Pelanggan: ${selectedCustomer.name}` : 'Tanpa pelanggan';
      const receiptNote = printReceipt ? 'Cetak struk' : 'Tanpa struk';
      
      const result = await createTransaksi.mutateAsync({
        transaksi: {
          nomor_transaksi: '', // Will be generated by function
          jenis_pembayaran: getPaymentMethodText(selectedPaymentMethod),
          subtotal: totalAmount,
          total: totalAmount,
          bayar: paid,
          kembalian: calculateChange(),
          status: 'selesai',
          catatan: `${customerNote} - ${receiptNote}`
        },
        detail: cartItems.map(item => ({
          barang_id: item.id,
          nama_barang: item.nama,
          harga_satuan: item.harga_jual,
          jumlah: item.quantity,
          subtotal: item.harga_jual * item.quantity
        }))
      });

      // Also save to POS transactions for compatibility
      await createPOSTransaction.mutateAsync({
        transaction: {
          kasir_username: user?.username || 'unknown',
          kasir_name: user?.full_name || 'Unknown',
          total_amount: totalAmount,
          payment_method: selectedPaymentMethod,
          amount_paid: paid,
          change_amount: calculateChange(),
          items_count: cartItems.length,
          status: 'completed' as const,
          notes: `${customerNote} - ${receiptNote}`
        },
        items: cartItems.map(item => ({
          product_id: item.id.toString(),
          product_name: item.nama,
          unit_price: item.harga_jual,
          quantity: item.quantity,
          subtotal: item.harga_jual * item.quantity,
          unit: item.satuan || 'pcs'
        }))
      });

      if (printReceipt) {
        console.log('Printing receipt...');
        // Receipt printing logic will be handled by parent component
      }

      toast({
        title: "Pembayaran berhasil!",
        description: "Transaksi telah disimpan ke database"
      });
      
      onSuccess();
    } catch (error) {
      console.error('Payment error:', error);
      toast({
        title: "Terjadi kesalahan",
        description: `Gagal memproses pembayaran: ${error.message || 'Unknown error'}`,
        variant: "destructive"
      });
    } finally {
      setProcessing(false);
    }
  };

  const quickAmountButtons = [
    { label: 'Pas', amount: totalAmount },
    { label: '50K', amount: 50000 },
    { label: '100K', amount: 100000 },
    { label: '200K', amount: 200000 }
  ];

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <CreditCard className="h-5 w-5" />
            Pembayaran
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          {/* Customer Info */}
          {selectedCustomer && (
            <div className="bg-blue-50 p-3 rounded-lg">
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">{selectedCustomer.name}</p>
                  <p className="text-sm text-gray-600">
                    {selectedCustomer.type === 'unit' ? 'Unit' : 
                     selectedCustomer.type === 'perorangan' ? 'Perorangan' : 'Tamu'}
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Payment Method Info */}
          <div className="bg-green-50 p-3 rounded-lg">
            <div className="flex items-center justify-between">
              <span className="font-medium">Metode Pembayaran:</span>
              <Badge variant="secondary">
                {selectedPaymentMethod === 'cash' ? 'Tunai' : 
                 selectedPaymentMethod === 'card' ? 'Kartu' : 'Digital'}
              </Badge>
            </div>
          </div>

          {/* Order Summary */}
          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="font-medium mb-2">Ringkasan Pesanan</h3>
            <div className="space-y-1 text-sm">
              {cartItems.map((item) => (
                <div key={item.id} className="flex justify-between">
                  <span>{item.nama} x{item.quantity}</span>
                  <span>Rp {(item.harga_jual * item.quantity).toLocaleString('id-ID')}</span>
                </div>
              ))}
            </div>
            <div className="border-t mt-2 pt-2 font-bold">
              <div className="flex justify-between">
                <span>Total</span>
                <span>Rp {totalAmount.toLocaleString('id-ID')}</span>
              </div>
            </div>
          </div>

          {/* Amount Paid */}
          <div>
            <Label>Jumlah Bayar</Label>
            <Input
              type="number"
              value={amountPaid}
              onChange={(e) => setAmountPaid(e.target.value)}
              placeholder="0"
              className="text-lg"
            />
            
            {/* Quick Amount Buttons */}
            <div className="grid grid-cols-4 gap-2 mt-2">
              {quickAmountButtons.map((btn) => (
                <Button
                  key={btn.label}
                  variant="outline"
                  size="sm"
                  onClick={() => setAmountPaid(btn.amount.toString())}
                >
                  {btn.label}
                </Button>
              ))}
            </div>
          </div>

          {/* Change */}
          {amountPaid && (
            <div className="bg-green-50 p-3 rounded-lg">
              <div className="flex justify-between items-center">
                <span className="font-medium">Kembalian</span>
                <span className="text-lg font-bold text-green-600">
                  Rp {calculateChange().toLocaleString('id-ID')}
                </span>
              </div>
            </div>
          )}

          {/* Print Option */}
          <div className="flex items-center gap-2">
            <input
              type="checkbox"
              id="printReceipt"
              checked={printReceipt}
              onChange={(e) => setPrintReceipt(e.target.checked)}
            />
            <Label htmlFor="printReceipt" className="flex items-center gap-2">
              <Printer className="h-4 w-4" />
              Cetak struk
            </Label>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-2 pt-4">
            <Button
              variant="outline"
              onClick={onClose}
              disabled={processing}
              className="flex-1"
            >
              Batal
            </Button>
            <Button
              onClick={handlePayment}
              disabled={processing || !amountPaid || parseFloat(amountPaid) < totalAmount}
              className="flex-1"
            >
              {processing ? 'Memproses...' : 'Bayar'}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default POSPayment;
